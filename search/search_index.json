{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Shriyans's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: Shriyans Sapkal</li> <li>Reviewer: Nick Kaplan</li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial make sure you have the following:</p> <ol> <li>A Github Account: Create one for free here.</li> <li>Git Installed: You can install it here.</li> <li>Visual Studio Code (VS Code): Download and install it from here.</li> <li>Docker Installed: Install Docker from here.</li> </ol>"},{"location":"tutorials/go-setup/#part-1-setting-up-project-repository","title":"Part 1: Setting Up Project Repository","text":""},{"location":"tutorials/go-setup/#create-a-local-directory-and-initialize-git","title":"Create a Local Directory and Initialize Git","text":"<p>1) Open terminal or command prompt</p> <p>2) Navigate to a folder you would like your project to be held in and create your directory:</p> <pre><code>mkdir HelloWorldGo\n</code></pre> <p>3) Enter the folder:</p> <pre><code>cd HelloWorldGo\n</code></pre> <p>4) Initialize a new git repository:</p> <pre><code>git init\n</code></pre> <p>5) Create a README file:</p> <pre><code>echo \"# My new Go Project\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre>"},{"location":"tutorials/go-setup/#create-a-remote-repository-on-github","title":"Create a Remote Repository on GitHub","text":"<p>1) Login to your GitHub account and navigate to the Create a repository page</p> <p>2) Fill in any following details:</p> <ul> <li> <p>Repository name: HelloWorldGo</p> </li> <li> <p>Description: \"Starting a Go Project to print 'Hello World' out\"</p> </li> <li> <p>Visibility: Public</p> </li> </ul> <p>3) Do not initialize the repository with a README, .gitignore, or license</p> <p>4) Click Create Repository</p>"},{"location":"tutorials/go-setup/#link-your-local-repository-to-github","title":"Link your Local Repository to GitHub","text":"<p>1) Add GitHub repository as a remote:</p> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/HelloWorldGo.git\n</code></pre> <p>Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> <p>2) Ensure your branch's name is main and push to the remote repository</p> <pre><code>git branch -M main\ngit push --set-upstream origin main\n</code></pre>"},{"location":"tutorials/go-setup/#part-2-setting-up-dev-container","title":"Part 2: Setting Up Dev Container","text":"<p>1) In VS Code open your HelloWorldGo folder</p> <p>2) Install the Dev Containers extension for VS Code</p> <p>3) Create a <code>.devcontainer</code> directory in the root of your project and add a file into the folder called <code>devcontainer.json</code></p> <p>4) Inside the <code>devcontainer.json</code> file add the follwing code to setup our environment:</p> <ul> <li>name: This specifies a clear, descriptive label for your development container.</li> <li>image: Defines the Docker image used to create the container. For this setup, we'll use the latest Rust environment image provided by Microsoft.</li> <li>customizations: Allows you to configure additional features in VS Code, such as pre-installing useful extensions. Adding extensions here ensures other developers on your project have them installed in their dev containers automatically.</li> </ul> <pre><code>{\n  \"name\": \"Hello World Go\",\n  \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"golang.Go\"]\n    }\n  }\n}\n</code></pre> Extension <p>The <code>golang.Go</code> extension was developed by Google engineers and provides extensive language support for the Go language in Visual Studio Code. It was released in 2015.</p> <p>5) Reopen the project in a container by pressing Ctrl+Shift+P or Cmd+Shift+P and then selecting Dev Containers: Reopen in Container</p>"},{"location":"tutorials/go-setup/#part-3-creating-the-go-project","title":"Part 3: Creating the Go Project","text":"<p>1) In the terminal, confirm Go is installed using <code>go version</code></p> <p>2) To create a Go Module use the command:</p> <pre><code>go mod init HelloWorld\n</code></pre> Purpose of <code>go mod</code> <p>This command manages modules in Go projects which allows for the management of dependencies in Go projects. It also tracks version of dependencies used and ensures a consistent development environment. It is similar to a <code>requirements.txt</code> in Python.</p> <p>3) Create a file <code>hello.go</code> and paste the following code</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423!\")\n}\n</code></pre> <code>main</code> package and import statement <p>The <code>main</code> package indicates that this file is the main file. It will be run by default when <code>go run .</code> is run. The <code>\"fmt\"</code> package provides functions for formatted input and output operations. It serves the same purpose as <code>&lt;stdio.h&gt;</code> in C.</p> <p>4) In the terminal you can then run your code using:</p> <pre><code>go run .\n</code></pre> <p>You should see <code>Hello COMP423!</code> output to your console </p> <p>5) Optionally you can first build an executable file using:</p> <pre><code>go build hello.go\n</code></pre> <p>6) Then you can run the executable in terminal using: <code>./hello</code></p> Warning <p>If you wish to preserve the binary of the built program, do not use <code>go run .</code>, instead use the above two step process.</p> <p> </p> <ol> <li> <p>Steps regarding git and dev container initialization were taken from the COMP 423 site.\u00a0\u21a9</p> </li> </ol>"}]}